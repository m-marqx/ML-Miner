import unittest
import pandas as pd
import numpy as np
from catboost import CatBoostClassifier, CatBoostRegressor
from machine_learning.model_handler import ModelHandler


class TestModelHandler(unittest.TestCase):
    def setUp(self):
        self.rng = np.random.default_rng(42)
        self.size = 10
        self.X_test = pd.DataFrame(
            self.rng.random((self.size, 4)), columns=["A", "B", "C", "D"]
        )
        self.y_test = pd.Series(self.rng.integers(0, 2, size=self.size))

        self.estimator = CatBoostClassifier(
            iterations=10,
            random_seed=42,
            logging_level="Silent",
            allow_writing_files=False,
        )

        self.estimator.fit(self.X_test, self.y_test, verbose=False)

        self.model_handler = ModelHandler(
            self.estimator, self.X_test, self.y_test
        )

    def test_init(self):
        self.assertEqual(self.model_handler.x_test.shape, self.X_test.shape)
        self.assertEqual(self.model_handler.y_test.shape, self.y_test.shape)
        self.assertEqual(self.model_handler.estimator, self.estimator)
        self.assertTrue(self.model_handler._has_predic_proba)
        self.assertIsNotNone(self.model_handler.y_pred_probs)

    def test_model_returns_default(self):
        target_series = pd.Series(
            self.rng.random(self.size), index=self.X_test.index
        )
        result = self.model_handler.model_returns(
            target_series, drawdown_min_window=3
        )

        expected_results = pd.DataFrame(
            {
                "y_pred_probs": {
                    0: 0.5736815746026938,
                    1: 0.46452844608846455,
                    2: 0.4646054991249463,
                    3: 0.5617969337078087,
                    4: 0.5708919241873583,
                    5: 0.5551277093813085,
                    6: 0.489580943119689,
                    7: 0.46106305920878166,
                    8: 0.5614343720374537,
                    9: 0.5519601198308035,
                },
                "target_Return": {
                    0: -0.19523564250319814,
                    1: -0.6125216209698255,
                    2: -0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.9926377302489945,
                    7: -0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Predict": {
                    0: 1,
                    1: -1,
                    2: -1,
                    3: 1,
                    4: 1,
                    5: 1,
                    6: -1,
                    7: -1,
                    8: 1,
                    9: 1,
                },
                "Position": {
                    0: 0.0,
                    1: 1.0,
                    2: -1.0,
                    3: -1.0,
                    4: 1.0,
                    5: 1.0,
                    6: 1.0,
                    7: -1.0,
                    8: -1.0,
                    9: 1.0,
                },
                "Result": {
                    0: -0.19523564250319814,
                    1: 0.6125216209698255,
                    2: 0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: 0.9926377302489945,
                    7: 0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Liquid_Result": {
                    0: -0.19623564250319814,
                    1: 0.6115216209698255,
                    2: 0.7106718960697559,
                    3: -0.3185044960250245,
                    4: -0.8612475163906902,
                    5: -0.8010917975248917,
                    6: 0.9916377302489945,
                    7: 0.2120756224978616,
                    8: -0.33614914340796787,
                    9: -0.2958346213736649,
                },
                "Period_Return_cum": {
                    0: -0.19523564250319814,
                    1: -0.8077572634730237,
                    2: -1.5194291595427796,
                    3: -1.8369336555678042,
                    4: -2.697181171958494,
                    5: -3.4972729694833857,
                    6: -4.4899106997323806,
                    7: -4.702986322230242,
                    8: -5.038135465638209,
                    9: -5.332970087011875,
                },
                "Total_Return": {
                    0: 0.8047643574968019,
                    1: 1.4172859784666274,
                    2: 2.1289578745363835,
                    3: 1.811453378511359,
                    4: 0.9512058621206686,
                    5: 0.15111406459577692,
                    6: 1.1437517948447713,
                    7: 1.356827417342633,
                    8: 1.0216782739346653,
                    9: 0.7268436525610003,
                },
                "Liquid_Return": {
                    0: 0.8037643574968019,
                    1: 1.4152859784666274,
                    2: 2.1259578745363834,
                    3: 1.807453378511359,
                    4: 0.9462058621206687,
                    5: 0.14511406459577703,
                    6: 1.1367517948447716,
                    7: 1.3488274173426331,
                    8: 1.0126782739346654,
                    9: 0.7168436525610004,
                },
                "max_Liquid_Return": {
                    0: np.nan,
                    1: np.nan,
                    2: np.nan,
                    3: 2.1259578745363834,
                    4: 2.1259578745363834,
                    5: 2.1259578745363834,
                    6: 2.1259578745363834,
                    7: 2.1259578745363834,
                    8: 2.1259578745363834,
                    9: 2.1259578745363834,
                },
                "drawdown": {
                    0: 0.0,
                    1: 0.0,
                    2: 0.0,
                    3: 0.14981693656299855,
                    4: 0.5549272760980686,
                    5: 0.9317417967995143,
                    6: 0.4652990031175157,
                    7: 0.3655436763361186,
                    8: 0.5236602351984494,
                    9: 0.6628138021232779,
                },
                "drawdown_duration": {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 1,
                    4: 2,
                    5: 3,
                    6: 4,
                    7: 5,
                    8: 6,
                    9: 7,
                },
            }
        )

        pd.testing.assert_frame_equal(
            result.astype("float64"), expected_results.astype("float64")
        )

    def test_model_returns_long_only(self):
        target_series = pd.Series(self.rng.random(10), index=self.X_test.index)
        result = self.model_handler.model_returns(
            target_series, drawdown_min_window=3, long_only=True
        )

        expected_results = pd.DataFrame(
            {
                "y_pred_probs": {
                    0: 0.5736815746026938,
                    1: 0.46452844608846455,
                    2: 0.4646054991249463,
                    3: 0.5617969337078087,
                    4: 0.5708919241873583,
                    5: 0.5551277093813085,
                    6: 0.489580943119689,
                    7: 0.46106305920878166,
                    8: 0.5614343720374537,
                    9: 0.5519601198308035,
                },
                "target_Return": {
                    0: -0.19523564250319814,
                    1: -0.6125216209698255,
                    2: -0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.9926377302489945,
                    7: -0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Predict": {
                    0: 1,
                    1: 0,
                    2: 0,
                    3: 1,
                    4: 1,
                    5: 1,
                    6: 0,
                    7: 0,
                    8: 1,
                    9: 1,
                },
                "Position": {
                    0: 0.0,
                    1: 1.0,
                    2: 0.0,
                    3: 0.0,
                    4: 1.0,
                    5: 1.0,
                    6: 1.0,
                    7: 0.0,
                    8: 0.0,
                    9: 1.0,
                },
                "Result": {
                    0: -0.19523564250319814,
                    1: -0.0,
                    2: -0.0,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.0,
                    7: -0.0,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Liquid_Result": {
                    0: -0.19623564250319814,
                    1: 0.0,
                    2: 0.0,
                    3: -0.3185044960250245,
                    4: -0.8612475163906902,
                    5: -0.8010917975248917,
                    6: 0.0,
                    7: 0.0,
                    8: -0.33614914340796787,
                    9: -0.2958346213736649,
                },
                "Period_Return_cum": {
                    0: -0.19523564250319814,
                    1: -0.8077572634730237,
                    2: -1.5194291595427796,
                    3: -1.8369336555678042,
                    4: -2.697181171958494,
                    5: -3.4972729694833857,
                    6: -4.4899106997323806,
                    7: -4.702986322230242,
                    8: -5.038135465638209,
                    9: -5.332970087011875,
                },
                "Total_Return": {
                    0: 0.8047643574968019,
                    1: 0.8047643574968019,
                    2: 0.8047643574968019,
                    3: 0.48725986147177736,
                    4: -0.37298765491891284,
                    5: -1.1730794524438046,
                    6: -1.1730794524438046,
                    7: -1.1730794524438046,
                    8: -1.5082285958517723,
                    9: -1.803063217225437,
                },
                "Liquid_Return": {
                    0: 0.8037643574968019,
                    1: 0.8037643574968019,
                    2: 0.8037643574968019,
                    3: 0.48525986147177735,
                    4: -0.37598765491891273,
                    5: -1.1770794524438042,
                    6: -1.1770794524438042,
                    7: -1.1770794524438042,
                    8: -1.5132285958517722,
                    9: -1.8090632172254368,
                },
                "max_Liquid_Return": {
                    0: np.nan,
                    1: np.nan,
                    2: np.nan,
                    3: 0.8037643574968019,
                    4: 0.8037643574968019,
                    5: 0.8037643574968019,
                    6: 0.8037643574968019,
                    7: 0.8037643574968019,
                    8: 0.8037643574968019,
                    9: 0.8037643574968019,
                },
                "drawdown": {
                    0: 0.0,
                    1: 0.0,
                    2: 0.0,
                    3: 0.39626601136800443,
                    4: 1.4677834385314963,
                    5: 2.4644583844320165,
                    6: 2.4644583844320165,
                    7: 2.4644583844320165,
                    8: 2.8826769086458195,
                    9: 3.250738292077893,
                },
                "drawdown_duration": {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 1,
                    4: 2,
                    5: 3,
                    6: 4,
                    7: 5,
                    8: 6,
                    9: 7,
                },
            }
        )

        pd.testing.assert_frame_equal(
            result.astype("float64"), expected_results.astype("float64")
        )

    def test_model_returns_short_only(self):
        target_series = pd.Series(self.rng.random(10), index=self.X_test.index)
        result = self.model_handler.model_returns(
            target_series, drawdown_min_window=3, short_only=True
        )

        expected_results = pd.DataFrame(
            {
                "y_pred_probs": {
                    0: 0.5736815746026938,
                    1: 0.46452844608846455,
                    2: 0.4646054991249463,
                    3: 0.5617969337078087,
                    4: 0.5708919241873583,
                    5: 0.5551277093813085,
                    6: 0.489580943119689,
                    7: 0.46106305920878166,
                    8: 0.5614343720374537,
                    9: 0.5519601198308035,
                },
                "target_Return": {
                    0: -0.19523564250319814,
                    1: -0.6125216209698255,
                    2: -0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.9926377302489945,
                    7: -0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Predict": {
                    0: 0,
                    1: -1,
                    2: -1,
                    3: 0,
                    4: 0,
                    5: 0,
                    6: -1,
                    7: -1,
                    8: 0,
                    9: 0,
                },
                "Position": {
                    0: 0.0,
                    1: 0.0,
                    2: -1.0,
                    3: -1.0,
                    4: 0.0,
                    5: 0.0,
                    6: 0.0,
                    7: -1.0,
                    8: -1.0,
                    9: 0.0,
                },
                "Result": {
                    0: -0.0,
                    1: 0.6125216209698255,
                    2: 0.7116718960697559,
                    3: -0.0,
                    4: -0.0,
                    5: -0.0,
                    6: 0.9926377302489945,
                    7: 0.2130756224978616,
                    8: -0.0,
                    9: -0.0,
                },
                "Liquid_Result": {
                    0: 0.0,
                    1: 0.6115216209698255,
                    2: 0.7106718960697559,
                    3: 0.0,
                    4: 0.0,
                    5: 0.0,
                    6: 0.9916377302489945,
                    7: 0.2120756224978616,
                    8: 0.0,
                    9: 0.0,
                },
                "Period_Return_cum": {
                    0: -0.19523564250319814,
                    1: -0.8077572634730237,
                    2: -1.5194291595427796,
                    3: -1.8369336555678042,
                    4: -2.697181171958494,
                    5: -3.4972729694833857,
                    6: -4.4899106997323806,
                    7: -4.702986322230242,
                    8: -5.038135465638209,
                    9: -5.332970087011875,
                },
                "Total_Return": {
                    0: 1.0,
                    1: 1.6125216209698254,
                    2: 2.3241935170395815,
                    3: 2.3241935170395815,
                    4: 2.3241935170395815,
                    5: 2.3241935170395815,
                    6: 3.316831247288576,
                    7: 3.5299068697864375,
                    8: 3.5299068697864375,
                    9: 3.5299068697864375,
                },
                "Liquid_Return": {
                    0: 1.0,
                    1: 1.6115216209698255,
                    2: 2.3221935170395813,
                    3: 2.3221935170395813,
                    4: 2.3221935170395813,
                    5: 2.3221935170395813,
                    6: 3.313831247288576,
                    7: 3.5259068697864375,
                    8: 3.5259068697864375,
                    9: 3.5259068697864375,
                },
                "max_Liquid_Return": {
                    0: np.nan,
                    1: np.nan,
                    2: np.nan,
                    3: 2.3221935170395813,
                    4: 2.3221935170395813,
                    5: 2.3221935170395813,
                    6: np.nan,
                    7: np.nan,
                    8: 3.5259068697864375,
                    9: 3.5259068697864375,
                },
                "drawdown": {
                    0: 0.0,
                    1: 0.0,
                    2: 0.0,
                    3: 0.0,
                    4: 0.0,
                    5: 0.0,
                    6: 0.0,
                    7: 0.0,
                    8: 0.0,
                    9: 0.0,
                },
                "drawdown_duration": {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 0,
                    4: 0,
                    5: 0,
                    6: 0,
                    7: 0,
                    8: 0,
                    9: 0,
                },
            }
        )

        pd.testing.assert_frame_equal(
            result.astype("float64"), expected_results.astype("float64")
        )

    def test_model_returns_step(self):
        target_series = pd.Series(self.rng.random(10), index=self.X_test.index)
        result = self.model_handler.model_returns(
            target_series, drawdown_min_window=3, step=0.02
        )

        expected_results = pd.DataFrame(
            {
                "y_pred_probs": {
                    0: 0.5736815746026938,
                    1: 0.46452844608846455,
                    2: 0.4646054991249463,
                    3: 0.5617969337078087,
                    4: 0.5708919241873583,
                    5: 0.5551277093813085,
                    6: 0.489580943119689,
                    7: 0.46106305920878166,
                    8: 0.5614343720374537,
                    9: 0.5519601198308035,
                },
                "target_Return": {
                    0: -0.19523564250319814,
                    1: -0.6125216209698255,
                    2: -0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.9926377302489945,
                    7: -0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Predict": {
                    0: 1,
                    1: -1,
                    2: -1,
                    3: 1,
                    4: 1,
                    5: 1,
                    6: 0,
                    7: -1,
                    8: 1,
                    9: 1,
                },
                "Position": {
                    0: 0.0,
                    1: 1.0,
                    2: -1.0,
                    3: -1.0,
                    4: 1.0,
                    5: 1.0,
                    6: 1.0,
                    7: 0.0,
                    8: -1.0,
                    9: 1.0,
                },
                "Result": {
                    0: -0.19523564250319814,
                    1: 0.6125216209698255,
                    2: 0.7116718960697559,
                    3: -0.3175044960250245,
                    4: -0.8602475163906902,
                    5: -0.8000917975248917,
                    6: -0.0,
                    7: 0.2130756224978616,
                    8: -0.33514914340796786,
                    9: -0.2948346213736649,
                },
                "Liquid_Result": {
                    0: -0.19623564250319814,
                    1: 0.6115216209698255,
                    2: 0.7106718960697559,
                    3: -0.3185044960250245,
                    4: -0.8612475163906902,
                    5: -0.8010917975248917,
                    6: 0.0,
                    7: 0.2120756224978616,
                    8: -0.33614914340796787,
                    9: -0.2958346213736649,
                },
                "Period_Return_cum": {
                    0: -0.19523564250319814,
                    1: -0.8077572634730237,
                    2: -1.5194291595427796,
                    3: -1.8369336555678042,
                    4: -2.697181171958494,
                    5: -3.4972729694833857,
                    6: -4.4899106997323806,
                    7: -4.702986322230242,
                    8: -5.038135465638209,
                    9: -5.332970087011875,
                },
                "Total_Return": {
                    0: 0.8047643574968019,
                    1: 1.4172859784666274,
                    2: 2.1289578745363835,
                    3: 1.811453378511359,
                    4: 0.9512058621206686,
                    5: 0.15111406459577692,
                    6: 0.15111406459577692,
                    7: 0.3641896870936385,
                    8: 0.02904054368567066,
                    9: -0.26579407768799435,
                },
                "Liquid_Return": {
                    0: 0.8037643574968019,
                    1: 1.4152859784666274,
                    2: 2.1259578745363834,
                    3: 1.807453378511359,
                    4: 0.9462058621206687,
                    5: 0.14511406459577703,
                    6: 0.14511406459577703,
                    7: 0.35718968709363863,
                    8: 0.021040543685670765,
                    9: -0.27479407768799424,
                },
                "max_Liquid_Return": {
                    0: np.nan,
                    1: np.nan,
                    2: np.nan,
                    3: 2.1259578745363834,
                    4: 2.1259578745363834,
                    5: 2.1259578745363834,
                    6: 2.1259578745363834,
                    7: 2.1259578745363834,
                    8: 2.1259578745363834,
                    9: 2.1259578745363834,
                },
                "drawdown": {
                    0: 0.0,
                    1: 0.0,
                    2: 0.0,
                    3: 0.14981693656299855,
                    4: 0.5549272760980686,
                    5: 0.9317417967995143,
                    6: 0.9317417967995143,
                    7: 0.8319864700181171,
                    8: 0.990103028880448,
                    9: 1.1292565958052765,
                },
                "drawdown_duration": {
                    0: 0,
                    1: 0,
                    2: 0,
                    3: 1,
                    4: 2,
                    5: 3,
                    6: 4,
                    7: 5,
                    8: 6,
                    9: 7,
                },
            }
        )

        pd.testing.assert_frame_equal(
            result.astype("float64"), expected_results.astype("float64")
        )

    def test_raises_error_predict_proba(self):
        linear_model = CatBoostRegressor(
            logging_level="Silent",
            allow_writing_files=False,
        ).fit(self.X_test, self.y_test)

        target_series = pd.Series(self.rng.random(10), index=self.X_test.index)

        linear_model_handler = ModelHandler(
            linear_model,
            self.X_test,
            self.y_test,
        )

        with self.assertRaises(ValueError):
            linear_model_handler.model_returns(target_series)
