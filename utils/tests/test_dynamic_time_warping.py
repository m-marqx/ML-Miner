import unittest
import pandas as pd
import numpy as np
from custom_exceptions.invalid_arguments import InvalidArgumentError
from utils import DynamicTimeWarping

class TestDynamicTimeWarping(unittest.TestCase):
    def setUp(self):
        rng = np.random.default_rng(33)
        input_x = pd.Series(rng.random((20)), name="X")
        input_y = pd.Series(rng.random((20)), name="Y")
        self.dtw = DynamicTimeWarping(input_x, input_y)

    def test_dtw_df(self):
        results = self.dtw.dtw_df
        expected_results = pd.DataFrame({
            "X_path": {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                6: 5,
                7: 5,
                8: 5,
                9: 6,
                10: 6,
                11: 7,
                12: 8,
                13: 9,
                14: 10,
                15: 11,
                16: 12,
                17: 13,
                18: 14,
                19: 15,
                20: 15,
                21: 15,
                22: 16,
                23: 16,
                24: 17,
                25: 18,
                26: 19,
            },
            "Y_path": {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                6: 6,
                7: 7,
                8: 8,
                9: 9,
                10: 10,
                11: 11,
                12: 12,
                13: 12,
                14: 12,
                15: 12,
                16: 12,
                17: 13,
                18: 13,
                19: 14,
                20: 15,
                21: 16,
                22: 17,
                23: 18,
                24: 19,
                25: 19,
                26: 19,
            },
            "X": {
                0: 0.44364223696266714,
                1: 0.5684911919245564,
                2: 0.9081037749608196,
                3: 0.25424955349880196,
                4: 0.5887812705548484,
                5: 0.35912332061031327,
                6: 0.35912332061031327,
                7: 0.35912332061031327,
                8: 0.35912332061031327,
                9: 0.7563736170826567,
                10: 0.7563736170826567,
                11: 0.543058861944433,
                12: 0.20208445782257867,
                13: 0.5161052853038871,
                14: 0.24205589164409225,
                15: 0.04957157501651144,
                16: 0.11291842094080318,
                17: 0.34278811417961996,
                18: 0.015436335029296422,
                19: 0.7726223186926501,
                20: 0.7726223186926501,
                21: 0.7726223186926501,
                22: 0.803641956335516,
                23: 0.803641956335516,
                24: 0.02059809225038467,
                25: 0.5261748363555228,
                26: 0.43197593039429427,
            },
            "Y": {
                0: 0.4011394081519617,
                1: 0.07192338114980312,
                2: 0.940111966487205,
                3: 0.29677757425767115,
                4: 0.9322303599288776,
                5: 0.403531943834889,
                6: 0.20956186370584673,
                7: 0.2511168633248656,
                8: 0.24754284677469984,
                9: 0.8048359821996709,
                10: 0.8292578473887628,
                11: 0.8083779107930295,
                12: 0.266317653158886,
                13: 0.266317653158886,
                14: 0.266317653158886,
                15: 0.266317653158886,
                16: 0.266317653158886,
                17: 0.29578052770356267,
                18: 0.29578052770356267,
                19: 0.5376961068747554,
                20: 0.7118442163223955,
                21: 0.7066600718057857,
                22: 0.8424283478779694,
                23: 0.764906298431927,
                24: 0.514458785774405,
                25: 0.514458785774405,
                26: 0.514458785774405,
            },
        })

        pd.testing.assert_frame_equal(results, expected_results)

    def test_align_dtw_distance(self):
        x_series_result, y_series_result = self.dtw.align_dtw_distance()

        x_series_expected_result = pd.Series(
            [
                0.44364223696266714,
                0.5684911919245564,
                0.9081037749608196,
                0.25424955349880196,
                0.5887812705548484,
                0.35912332061031327,
                0.35912332061031327,
                0.35912332061031327,
                0.35912332061031327,
                0.7563736170826567,
                0.7563736170826567,
                0.543058861944433,
                0.20208445782257867,
                0.5161052853038871,
                0.24205589164409225,
                0.04957157501651144,
                0.11291842094080318,
                0.34278811417961996,
                0.015436335029296422,
                0.7726223186926501,
            ],
            name="x",
        )

        y_series_expected_result = pd.Series(
            [
                0.4011394081519617,
                0.07192338114980312,
                0.940111966487205,
                0.29677757425767115,
                0.9322303599288776,
                0.403531943834889,
                0.20956186370584673,
                0.2511168633248656,
                0.24754284677469984,
                0.8048359821996709,
                0.8292578473887628,
                0.8083779107930295,
                0.266317653158886,
                0.266317653158886,
                0.266317653158886,
                0.266317653158886,
                0.266317653158886,
                0.29578052770356267,
                0.29578052770356267,
                0.5376961068747554,
            ],
            name="y",
        )

        pd.testing.assert_series_equal(x_series_result, x_series_expected_result)
        pd.testing.assert_series_equal(y_series_result, y_series_expected_result)

    def test_calculate_dtw_distance_ratio(self):
        result = self.dtw.calculate_dtw_distance("ratio")
        expected_result = pd.Series(
            [
                1.1059552563197788,
                7.904122176076431,
                0.9659527878939929,
                0.8567006928834013,
                0.6315834539005661,
                0.8899501665158231,
                1.7136864229953583,
                1.4301043580084924,
                1.4507521638755652,
                0.9397860356782717,
                0.9121090858101493,
                0.6717883488573866,
                0.7588098476596833,
                1.9379311854929007,
                0.9088991614824755,
                0.1861370225688226,
                0.4239990087079795,
                1.15892725204402,
                0.05218847619599568,
                1.4369126144196085,
                1.0853811845016497,
                1.093343673314251,
                0.9539588243437509,
                1.0506410497377232,
                0.04003837201337471,
                1.0227735455299531,
                0.8396706254011177,
            ]
        )

        pd.testing.assert_series_equal(result, expected_result)

    def test_calculate_dtw_distance_absolute(self):
        result = self.dtw.calculate_dtw_distance("absolute")
        expected_result = pd.Series(
            [
                0.04250282881070544,
                0.4965678107747533,
                -0.03200819152638534,
                -0.04252802075886919,
                -0.3434490893740292,
                -0.04440862322457573,
                0.14956145690446654,
                0.10800645728544767,
                0.11158047383561343,
                -0.04846236511701418,
                -0.07288423030610613,
                -0.2653190488485965,
                -0.06423319533630734,
                0.2497876321450011,
                -0.024261761514793756,
                -0.21674607814237457,
                -0.15339923221808283,
                0.047007586476057295,
                -0.28034419267426625,
                0.23492621181789464,
                0.060778102370254605,
                0.06596224688686436,
                -0.038786391542453336,
                0.038735657903589016,
                -0.4938606935240203,
                0.011716050581117798,
                -0.08248285538011069,
            ]
        )

        pd.testing.assert_series_equal(result, expected_result)

    def test_calculate_dtw_distance_invalid_method(self):
        with self.assertRaises(InvalidArgumentError):
            self.dtw.calculate_dtw_distance("invalid_method")

        with self.assertRaisesRegex(InvalidArgumentError, "method must be either 'ratio' or 'absolute'"):
            self.dtw.calculate_dtw_distance("invalid_method")

    def test_calculate_dtw_distance_ratio_aligned(self):
        result = self.dtw.calculate_dtw_distance("ratio", align_sequences=True)
        expected_result = pd.Series(
            [
                1.1059552563197788,
                7.904122176076431,
                0.9659527878939929,
                0.8567006928834013,
                0.6315834539005661,
                0.8899501665158231,
                1.7136864229953583,
                1.4301043580084924,
                1.4507521638755652,
                0.9397860356782717,
                0.9121090858101493,
                0.6717883488573866,
                0.7588098476596833,
                1.9379311854929007,
                0.9088991614824755,
                0.1861370225688226,
                0.4239990087079795,
                1.15892725204402,
                0.05218847619599568,
                1.4369126144196085,
            ]
        )

        pd.testing.assert_series_equal(result, expected_result)

    def test_calculate_dtw_distance_absolute_aligned(self):
        result = self.dtw.calculate_dtw_distance("absolute", align_sequences=True)
        expected_result = pd.Series(
            [
                0.04250282881070544,
                0.4965678107747533,
                -0.03200819152638534,
                -0.04252802075886919,
                -0.3434490893740292,
                -0.04440862322457573,
                0.14956145690446654,
                0.10800645728544767,
                0.11158047383561343,
                -0.04846236511701418,
                -0.07288423030610613,
                -0.2653190488485965,
                -0.06423319533630734,
                0.2497876321450011,
                -0.024261761514793756,
                -0.21674607814237457,
                -0.15339923221808283,
                0.047007586476057295,
                -0.28034419267426625,
                0.23492621181789464,
            ]
        )

        pd.testing.assert_series_equal(result, expected_result)
